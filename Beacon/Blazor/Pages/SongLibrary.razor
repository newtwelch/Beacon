@using System.Diagnostics
@inject ISongService SongService
@inject IJSRuntime jSRuntime

<div class="grid-cols-12 grid h-full w-full relative">

	<!-- |===== LEFT SIDE ======| -->
	<div class="border-r-2 col-span-5 border-sidepanel bg-container h-full  overflow-hidden rounded-r-3xl p-10">

		<div class="@(editMode ? "" : "hidden") flex flex-col w-full h-full space-y-3 overflow-hidden">
			<!--[ EDIT MODE: Lyric Text]-->
			<!--[ EDIT MODE: Sequence ]-->
			<!--[ EDIT MODE: Tags ]-->
		</div>

		<div class="@(editMode ? "hidden" : "") flex flex-col w-full h-full space-y-3 overflow-hidden">

			<!--[ SEARCH INPUT ]-->
			<div class="flex w-full flex-col space-y-2">
				<BeaconSearchMode ActiveSearchMode="currentSearchMode" SearchModeChanged="switchSearchMode"></BeaconSearchMode>
				<DebounceInput class="bg-default text-accented border-0 h-16 rounded-xl px-3 text-sm placeholder-l-text placeholder-opacity-50 ring-l-primary focus:ring-1 dark:ring-d-primary dark:placeholder-d-text dark:placeholder-opacity-50"
							   placeholder="Search" @bind-Value="searchText" @bind-Value:event="oninput" OnValueChanged="OnSearchChanged"
							   DebounceTime="100"></DebounceInput>
			</div>

			<!--[ SONG LIST ]-->
			<SongList Songs="songs" SelectedSong="selectedSong" IsQueueMode="isQueueMode" SelectedSongChanged="SelectedSongChanged"></SongList>

			<!--[ QUEUE AND ADD SONG ]-->
			<div class="flex justify-between">
				<BeaconToggle IconUnchecked="L" MessageUnchecked="VIEW QUEUE" IconChecked="L" MessageChecked="BACK TO SONGS"></BeaconToggle>
				<BeaconButton Message="Add Song" Icon="S" OnClick="AddSongClick"></BeaconButton>
			</div>

		</div>
		
	</div>
		

	<!-- |===== RIGHT SIDE ======| -->
	<div class="col-span-7 bg-default flex h-full w-full flex-col overflow-auto">

		<!--------[ TOP ]-------->
		<div class="via-l-container/25 border-b-2 border-sidepanel to-l-container/0 flex h-32 w-full items-center rounded-b-3xl bg-gradient-to-t from-l-container px-10 dark:from-d-container dark:via-d-container/25 dark:to-d-container/0">

			<!--[ KEY ]-->
			<div class="bg-sidepanel flex size-16 flex-none items-center justify-center rounded-xl">
				<input class="text-l-text-accent flex text-center text-2xl dark:text-d-text-accent bg-transparent border-0 focus:ring-0" placeholder="C#" value="@selectedSong.Key"/>
			</div>


			<!--[ TITLE AND AUTHOR ]-->
			<p class="flex-1 mx-3 truncate leading-7">
				@if (!editMode)
				{
					<span class="text-accented w-full text-3xl font-bold">@selectedSong.Title</span><br />
					<span class="text-accented text-lg">@selectedSong.Author</span>

				}
				else
				{
					<input class="bg-sidepanel text-accented m-px border-0 w-full rounded-xl px-3 py-0.5 text-lg placeholder-l-text placeholder-opacity-50 ring-l-primary focus:ring-1 dark:ring-d-primary dark:placeholder-d-text dark:placeholder-opacity-50"
					@bind-value="@selectedSong.Title" @bind-value:event="oninput"/>

					<br />

					<input class="bg-sidepanel text-accented m-px border-0 rounded-xl px-3 py-0.5 text-sm placeholder-l-text placeholder-opacity-50 ring-l-primary focus:ring-1 dark:ring-d-primary dark:placeholder-d-text dark:placeholder-opacity-50"
					@bind-value="selectedSong.Author"/>
				}
			</p>


			<!--[ ACTION BUTTONS ]-->
			<div class="flex flex-none space-x-3">
				@if (editMode)
				{
					<BeaconButton Message="DISCARD" Icon="D" Hover="hover:bg-l-red dark:hover:bg-d-red hover:text-accented-on-primary" OnClick="DiscardEditClick"></BeaconButton>
					<BeaconButton Message="SAVE" Icon="s" Background="bg-primary text-accented-on-primary" Hover="hover:bg-l-sidepanel hover:text-primary" OnClick="SaveEditClick"></BeaconButton>
				}
				else
				{
					<BeaconButton Message="EDIT" Icon="E" OnClick="EditButtonClick"></BeaconButton>
				}
			</div>

		</div>


		<!-------[ BOTTOM ]-------->

		<!--[ LANGUAGE ]-->
		<div class="px-10 pt-5">
			<SongLanguageList SelectedSong="selectedSong" Songs="languagesOfSelectedSong" SelectedSongChanged="SelectedSongChanged" AddLanguage="AddLanguageClick"></SongLanguageList>
		</div>

		<!--[ LYRICS ]-->
		<LyricList SelectedLyric="selectedLyric" Lyrics="lyrics" SelectedLyricChanged="SelectedLyricChanged"></LyricList>


	</div> 

</div>

@code {
	private List<Song> songs = new List<Song>();
	private List<Song> languagesOfSelectedSong = new List<Song>();
	private Song selectedSong = new Song();
	private Song selectedSongClone = new Song();
	private Lyric selectedLyric = new Lyric();
	private List<Lyric> lyrics = new List<Lyric>();

	private SearchMode currentSearchMode;
	private bool isQueueMode = false;
	private bool editMode = false;

	private string searchText = "";

	protected override async Task OnInitializedAsync()
	{
		songs = await SongService.GetAllAsync();
	}

	private async Task switchSearchMode(SearchMode searchMode)
	{
		currentSearchMode = searchMode;
		await OnSearchChanged(searchText);
	} 

	private async Task SelectedSongChanged(Song song)
	{
		selectedSong = await SongService.GetAsync(song.Id);
		languagesOfSelectedSong = await SongService.GetLanguagesAsync(selectedSong.Number);
		UpdateLyrics();
	}

	private void UpdateLyrics() => lyrics = selectedSong.Lyrics();

	private async Task OnSearchChanged(string value)
	{
		if(String.IsNullOrWhiteSpace(searchText))
		{
			songs = await SongService.GetAllAsync();
			return;
		}

		songs = currentSearchMode switch
		{
			SearchMode.Title => await SongService.QueryTitleAsync(searchText),
			SearchMode.Lyric => await SongService.QueryLyricAsync(searchText),
			_ => await SongService.GetAllAsync()
		};
	}

	private void EditButtonClick()
	{
		editMode = true;
		selectedSongClone = new Song(selectedSong);
	}

	private async Task SaveEditClick()
	{
		editMode = false;
		await SongService.UpdateAsync(selectedSong);
	}

	private void DiscardEditClick()
	{
		editMode = false;
		selectedSong = new Song(selectedSongClone);
	}

	private async Task AddSongClick()
	{
		await AddSong(new Song("Song Title", "Song Author"));
	}

	private async Task AddLanguageClick()
	{
		await AddSong(new Song(selectedSong.Number, selectedSong.Title, selectedSong.Author));

	}

	private async Task AddSong(Song song)
	{
		var newSong = await SongService.AddAsync(song);
		songs.Add(newSong);
		await SelectedSongChanged(newSong);

		await InvokeAsync(StateHasChanged);
		await jSRuntime.InvokeVoidAsync("ScrollWithHeight", "SongList", songs.Count());
	}

	private void SelectedLyricChanged(Lyric lyric)
	{
		selectedLyric = lyric;
	}
}

@inject IJSRuntime jSRuntime

<div tabindex="0" id="ChapterList" class="h-full w-full overflow-auto transition-all" @onkeydown="Navigate">

	<Virtualize Items="Chapters" Context="Chapter" ItemSize="64">
		@{
			var isSelected = Chapter.Id == SelectedChapter.Id;

			<div id="c(@Chapter.Id)" class="outline-0 group flex h-16 cursor-pointer select-none items-center rounded-xl px-3
@(isSelected ? "bg-primary text-accented-on-primary" : "hover:text-accented hover:bg-primary hover:bg-opacity-25 dark:hover:bg-opacity-15 ")"
				@onclick="(async () => await SelectionChanged(Chapter))">
	
				<div class="flex-1 truncate text-sm">
					<span class="text-sm">@Chapter.Id</span>
				</div>
			</div>
		}


	</Virtualize>

</div>

@code {
	[Parameter]
	public List<Chapter> Chapters { get; set; }

	[Parameter]
	public Chapter SelectedChapter { get; set; } = new Chapter();

	[Parameter]
	public EventCallback<Chapter> SelectedChapterChanged { get; set; }


	private DateTime lastKeyDownTime = DateTime.MinValue;
	private async Task Navigate(KeyboardEventArgs e)
	{
		if (Chapters.Count <= 0) return;

		DateTime currentTime = DateTime.Now;
		int timeElapsed = (currentTime - lastKeyDownTime).Milliseconds;
		if (timeElapsed <= 150) return;
		lastKeyDownTime = currentTime;

		var index = Chapters!.IndexOf(Chapters.Where(c => c.Id == SelectedChapter!.Id).First());

		if (e.Code == "ArrowUp")
			await SelectionChanged(Chapters[Math.Max(index - 1, 0)]);
		else if (e.Code == "ArrowDown")
			await SelectionChanged(Chapters[Math.Min(index + 1, Chapters.Count() - 1)]);

	}

	private async Task SelectionChanged(Chapter chapter)
	{
		SelectedChapter = chapter;

		var index = Chapters!.IndexOf(Chapters.Where(c => c.Id == SelectedChapter!.Id).First());
		await jSRuntime.InvokeVoidAsync("ScrollWithHeight", "ChapterList", index);

		await SelectedChapterChanged.InvokeAsync(chapter);

	}
}

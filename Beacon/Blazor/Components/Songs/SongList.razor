@inject IJSRuntime jSRuntime

<div tabindex="0" id="SongList" class="h-full w-full overflow-auto transition-all" @onkeydown="Navigate">

	<Virtualize Items="Songs" Context="Song" ItemSize="64">
		@{
			var isSelected = Song.Id == SelectedSong.Id;

			<div id="@Song.Id" class="outline-0 group flex h-16 cursor-pointer select-none items-center rounded-xl px-3 @(isSelected ? "bg-primary text-accented-on-primary" : "hover:text-accented hover:bg-primary hover:bg-opacity-25 dark:hover:bg-opacity-15 ")"
				@onclick="(async () => await SelectionChanged(Song))">
	
				<div class="flex-1 truncate text-sm">
					<span class="text-sm">@((MarkupString)Song.Title)</span>
					<br/>
					<span class="text-xs @(isSelected ? "" : "opacity-50")">
						@if (!String.IsNullOrWhiteSpace(Song.LyricText))
						{
							var spanStart = "<span class=\"text-orange\">";
							var spanEnd = "</span>";
							@((MarkupString)$" {Song!.LyricText.Replace("<b>", spanStart).Replace("</b>", spanEnd)} ")
						}
						else if (!String.IsNullOrWhiteSpace(Song.Tags))
						{
							@((MarkupString)Song!.Tags)
						}
						else
						{
							@((MarkupString)Song!.Author)
						}
					</span>
				</div>

				<div class="flex space-x-5">
				
					@if (Song.InQueue)
					{
						<button class="font-ark hover:opacity-50" @onclick="(() => RemoveFromQueueClick(Song))" @onclick:stopPropagation="true">
							R
						</button>
					}
					else
					{
						<button class="font-ark hover:opacity-50 @(isSelected ? "flex" : "hidden group-hover:flex")" @onclick="(() => AddToQueueClick(Song))" @onclick:stopPropagation="true">
							A
						</button>
					}

					<button class="font-ark hover:opacity-50 @(IsQueueMode ? "invisible" : isSelected ? "flex" : "invisible group-hover:visible")" @onclick="(() => DeleteSongClick(Song))" @onclick:stopPropagation="true">D</button>
				</div>
			</div>
		}


	</Virtualize>

</div>

@code {
	[Parameter]
	public List<Song> Songs { get; set; }

	[Parameter]
	public Song SelectedSong { get; set; } = new Song();

	[Parameter]
	public EventCallback<Song> SelectedSongChanged { get; set; }

	[Parameter]
	public EventCallback<Song> SongDeletionRequest { get; set; }

	[Parameter]
	public EventCallback<Song> SongAddToQueue { get; set; }

	[Parameter]
	public EventCallback<Song> SongRemoveFromQueue { get; set; }

	[Parameter]
	public bool IsQueueMode { get; set; }

	private DateTime lastKeyDownTime = DateTime.MinValue;
	private async Task Navigate(KeyboardEventArgs e)
	{
		if (Songs.Count <= 0) return;

		DateTime currentTime = DateTime.Now;
		int timeElapsed = (currentTime - lastKeyDownTime).Milliseconds;
		if (timeElapsed <= 150) return;
		lastKeyDownTime = currentTime;

		var index = Songs!.IndexOf(Songs.Where(s => s.Id == SelectedSong!.Id).First());

		if (e.Code == "ArrowUp")
			await SelectionChanged(Songs[Math.Max(index - 1, 0)]);
		else if (e.Code == "ArrowDown")
			await SelectionChanged(Songs[Math.Min(index + 1, Songs.Count() - 1)]);

	}

	private async Task SelectionChanged(Song song)
	{
		SelectedSong = song;

		var index = Songs!.IndexOf(Songs.Where(s => s.Id == SelectedSong!.Id).First());
		await jSRuntime.InvokeVoidAsync("ScrollWithHeight", "SongList", index);

		await SelectedSongChanged.InvokeAsync(song);

	}

	private async Task AddToQueueClick(Song song) => await SongAddToQueue.InvokeAsync(song);
	private async Task RemoveFromQueueClick(Song song) => await SongRemoveFromQueue.InvokeAsync(song);
	private async Task DeleteSongClick(Song song) => await SongDeletionRequest.InvokeAsync(song);
}

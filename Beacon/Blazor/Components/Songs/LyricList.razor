@inject IJSRuntime jSRuntime

<div tabindex="0" id="LyricList" class="mx-10 mb-5 flex h-full select-none flex-col space-y-2 overflow-auto rounded-3xl" @onkeydown="Navigate">
	
	@foreach(var lyric in Lyrics)
	{
		var isSelected = lyric.Id == SelectedLyric.Id;
		var sameText = lyric.Text == SelectedLyric.Text;

		<div id="lyric(@lyric.Id)" class="border-x-2 border-sidepanel bg-container relative flex w-full cursor-pointer items-center whitespace-pre rounded-3xl text-center text-sm @(isSelected && sameText ? "bg-primary text-accented-on-primary" : "hover:bg-primary hover:bg-opacity-50 hover:text-accented-on-primary dark:hover:bg-opacity-15 dark:bg-opacity-25 dark:border-opacity-50 bg-opacity-25 border-opacity-50")"
		@onclick="(async () => await SelectionChanged(lyric))">

			<span class="absolute left-5 top-3 text-xs">@lyric.Line</span>
			<p class="h-fit w-full py-4 text-sm">@((MarkupString)lyric.Text)</p>
		</div>
		
	}

</div>

@code {
	[Parameter]
	public List<Lyric> Lyrics { get; set; }

	[Parameter]
	public Lyric SelectedLyric { get; set; }

	[Parameter]
	public EventCallback<Lyric> SelectedLyricChanged { get; set; }

	private DateTime lastKeyDownTime = DateTime.MinValue;
	private async Task Navigate(KeyboardEventArgs e)
	{
		if (Lyrics.Count <= 0) return;

		DateTime currentTime = DateTime.Now;
		int timeElapsed = (currentTime - lastKeyDownTime).Milliseconds;
		if (timeElapsed <= 150) return;
		lastKeyDownTime = currentTime;

		var index = Lyrics!.IndexOf(Lyrics.Where(l => l.Id == SelectedLyric!.Id).First());

		if (e.Code == "ArrowUp")
			await SelectionChanged(Lyrics[Math.Max(index - 1, 0)]);
		else if (e.Code == "ArrowDown")
			await SelectionChanged(Lyrics[Math.Min(index + 1, Lyrics.Count() - 1)]);

	}

	private async Task SelectionChanged(Lyric lyric)
	{
		SelectedLyric = lyric;

		await jSRuntime.InvokeVoidAsync("ScrollToView", $"lyric({lyric.Id})");

		await SelectedLyricChanged.InvokeAsync(lyric);

	}
}
